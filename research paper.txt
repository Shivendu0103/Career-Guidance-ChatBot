**Career Guidance Chatbot using Deep Learning and Streamlit-based Web Interface**

---

# Abstract

This paper presents the design and development of an intelligent Career Guidance Chatbot system, combining Natural Language Processing (NLP) and Deep Learning with a simple web interface. Using a custom dataset of intents, career paths, and job listings, the system classifies user input to predict intents and generate dynamic, context-aware responses. The backend is powered by a deep neural network, while the frontend is developed using Streamlit, allowing an interactive and user-friendly experience. The system provides a lightweight and effective solution for career counseling support.

---

# Keywords
Chatbot, Deep Learning, NLP, TensorFlow, Keras, Career Guidance, Streamlit, Bag of Words, Intent Recognition

---

# 1. Introduction

Chatbots are increasingly used across industries to provide instant assistance, answer queries, and improve engagement. Career counseling is an area where students seek quick and reliable advice about their future paths. This project introduces a chatbot that can guide students by predicting their queries' intents and offering meaningful career suggestions using structured datasets. Combining NLP, deep learning, and a responsive web application ensures accessibility and usability.

---

# 2. Literature Review

Early chatbots like ELIZA used rule-based methods. Modern systems leverage machine learning, with deep learning offering better generalization. Recent works use transformers and sequence-to-sequence models for conversation generation. For specific-purpose bots like career counseling, intent recognition models based on feedforward networks provide a balance between complexity and efficiency.

---

# 3. Methodology

## 3.1 Dataset Preparation
- **Intent Dataset (intents3.json)**: Contains multiple intents such as greeting, goodbye, and career-related queries.
- **Career_Path_Jobs.csv & Job_listing.csv**: Provide structured data about various career options and job opportunities.

## 3.2 Data Preprocessing
- **Tokenization**: Breaking down sentences into words.
- **Lemmatization**: Reducing words to their base forms.
- **Cleaning**: Removing unnecessary characters (e.g., ?, !).
- **Bag of Words (BoW)**: Binary vector representation for each input pattern.

## 3.3 Model Architecture
A feedforward neural network is designed:
- **Input Layer**: Size equals vocabulary length.
- **Hidden Layers**:
  - Dense Layer with 128 neurons (ReLU)
  - Dropout Layer (0.5)
  - Dense Layer with 64 neurons (ReLU)
  - Dropout Layer (0.5)
- **Output Layer**: Softmax activation for multi-class classification (intent prediction).

## 3.4 Model Training
- Optimizer: Stochastic Gradient Descent (SGD) with Nesterov momentum
- Loss Function: Categorical Crossentropy
- Epochs: 100
- Batch Size: 5

## 3.5 Frontend Development
- **Streamlit** is used to create a lightweight web interface.
- **Streamlit-chat** and **Streamlit-extras** libraries enhance the chat interaction with visuals and user experience.
- A logo image (`bot.jpg`) is integrated into the UI for branding.

---

# 4. System Architecture

```
User Input → Preprocessing (Tokenization + Lemmatization + BoW)
         → Prediction (Deep Neural Network Model)
         → Intent Classification
         → Response Selection (Dynamic or from Datasets)
         → Output through Streamlit Interface
```

---

# 5. Results

The chatbot successfully classified user inputs into the correct intents with a high degree of accuracy. It generated appropriate responses based on intent, including providing basic career advice and encouraging exploration of job listings.

Example interaction:
```
User: "Can you suggest some IT careers?"
Bot: "Sure! Some popular IT careers include Software Developer, Data Scientist, and System Analyst."
```

The Streamlit frontend offered an interactive and professional look, making it accessible to non-technical users.

---

# 6. Conclusion

This project demonstrates the feasibility of building a simple yet powerful career guidance chatbot using NLP and deep learning techniques. The integration with a web frontend through Streamlit makes it usable and accessible for students and career seekers. The modular design allows easy updates and expansions to the knowledge base.

---

# 7. Future Work
- Integrate a recommendation engine to suggest careers based on user profile.
- Add multi-turn conversation memory.
- Support multilingual queries.
- Deploy the chatbot to cloud platforms for wider accessibility.

---

# 8. References

1. Goldberg, Y. (2016). A Primer on Neural Network Models for Natural Language Processing.
2. Chollet, F. (2017). Deep Learning with Python. Manning Publications.
3. TensorFlow Documentation. https://www.tensorflow.org/
4. Streamlit Documentation. https://docs.streamlit.io/
5. Bird, S., Klein, E., & Loper, E. (2009). Natural Language Processing with Python. O'Reilly Media.

---

# Appendix

## Project Structure
```
chatbot_project/
├── intents3.json
├── chatbot_final_code.py
├── Chatbot_frontend.py
├── Career_Path_Jobs.csv
├── Job_listing.csv
├── words.pkl
├── classes.pkl
├── chatbot_model.h5
├── requirements.txt
└── README.md
```

---

# Deployment Instructions
1. Create a virtual environment
2. Install dependencies:
```bash
pip install -r requirements.txt
```
3. Run frontend:
```bash
streamlit run Chatbot_frontend.py
```

The chatbot will be available in your local web browser.

